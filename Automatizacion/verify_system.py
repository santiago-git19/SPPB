#!/usr/bin/env python3
"""
Script de Verificaci√≥n del Sistema SPPB con TRT Pose
====================================================

Este script verifica que todos los componentes del sistema est√©n
correctamente configurados antes de ejecutar las pruebas SPPB.
"""

import os
import sys
import cv2
from pathlib import Path

def check_file_exists(file_path, description):
    """Verifica si un archivo existe"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} (NO ENCONTRADO)")
        return False

def check_camera(camera_index, description):
    """Verifica si una c√°mara est√° disponible"""
    try:
        cap = cv2.VideoCapture(camera_index)
        if cap.isOpened():
            ret, frame = cap.read()
            if ret and frame is not None:
                print(f"‚úÖ {description}: C√°mara {camera_index} ({frame.shape})")
                cap.release()
                return True
            else:
                print(f"‚ùå {description}: C√°mara {camera_index} (NO PUEDE LEER FRAMES)")
                cap.release()
                return False
        else:
            print(f"‚ùå {description}: C√°mara {camera_index} (NO SE PUEDE ABRIR)")
            return False
    except Exception as e:
        print(f"‚ùå {description}: Error verificando c√°mara {camera_index}: {e}")
        return False

def check_video_file(video_path, description):
    """Verifica si un archivo de video es v√°lido"""
    try:
        cap = cv2.VideoCapture(video_path)
        if cap.isOpened():
            ret, frame = cap.read()
            if ret and frame is not None:
                fps = cap.get(cv2.CAP_PROP_FPS)
                frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
                duration = frame_count / fps if fps > 0 else 0
                print(f"‚úÖ {description}: {video_path}")
                print(f"   üìä Resoluci√≥n: {frame.shape}, FPS: {fps:.1f}, Duraci√≥n: {duration:.1f}s")
                cap.release()
                return True
            else:
                print(f"‚ùå {description}: {video_path} (NO PUEDE LEER FRAMES)")
                cap.release()
                return False
        else:
            print(f"‚ùå {description}: {video_path} (NO SE PUEDE ABRIR)")
            return False
    except Exception as e:
        print(f"‚ùå {description}: Error verificando video {video_path}: {e}")
        return False

def test_imports():
    """Verifica que todas las librer√≠as necesarias est√©n disponibles"""
    print("\nüîß VERIFICANDO IMPORTS...")
    
    required_imports = [
        ("cv2", "OpenCV"),
        ("numpy", "NumPy"),
        ("torch", "PyTorch"),
    ]
    
    optional_imports = [
        ("onnxruntime", "ONNX Runtime"),
        ("trt_pose", "TRT Pose"),
    ]
    
    success = True
    
    # Verificar imports requeridos
    for module, description in required_imports:
        try:
            __import__(module)
            print(f"‚úÖ {description}")
        except ImportError as e:
            print(f"‚ùå {description}: {e}")
            success = False
    
    # Verificar imports opcionales
    for module, description in optional_imports:
        try:
            __import__(module)
            print(f"‚úÖ {description}")
        except ImportError:
            print(f"‚ö†Ô∏è {description}: No disponible (opcional)")
    
    return success

def test_models():
    """Verifica que los modelos est√©n disponibles"""
    print("\nüìÅ VERIFICANDO MODELOS...")
    
    # Importar configuraci√≥n
    try:
        from utils.config import Config
        config = Config()
        
        models_ok = True
        models_ok &= check_file_exists(config.trt_pose_model, "Modelo TRT Pose")
        models_ok &= check_file_exists(config.pose_topology, "Topolog√≠a de poses")
        models_ok &= check_file_exists(config.pose_classifier_model, "Clasificador de poses")
        
        return models_ok
        
    except Exception as e:
        print(f"‚ùå Error importando configuraci√≥n: {e}")
        return False

def test_cameras():
    """Verifica que las c√°maras est√©n disponibles"""
    print("\nüìπ VERIFICANDO C√ÅMARAS...")
    
    try:
        from utils.config import Config
        config = Config()
        
        cameras_ok = True
        
        # Verificar c√°mara frontal
        if isinstance(config.frontal_camera, int):
            cameras_ok &= check_camera(config.frontal_camera, "C√°mara frontal")
        elif isinstance(config.frontal_camera, str):
            cameras_ok &= check_video_file(config.frontal_camera, "Video frontal")
        
        # Verificar c√°mara lateral
        if isinstance(config.lateral_camera, int):
            cameras_ok &= check_camera(config.lateral_camera, "C√°mara lateral")
        elif isinstance(config.lateral_camera, str):
            cameras_ok &= check_video_file(config.lateral_camera, "Video lateral")
        
        return cameras_ok
        
    except Exception as e:
        print(f"‚ùå Error verificando c√°maras: {e}")
        return False

def test_trt_pose_initialization():
    """Verifica que TRT Pose se pueda inicializar"""
    print("\nü§ñ VERIFICANDO INICIALIZACI√ìN TRT POSE...")
    
    try:
        from utils.config import Config
        from utils.trt_pose_proc import TRTPoseProcessor
        from utils.trt_pose_classifier import create_pose_classifier
        
        config = Config()
        
        # Inicializar procesador
        print("üîß Inicializando TRTPoseProcessor...")
        processor = TRTPoseProcessor(
            model_path=config.trt_pose_model,
            topology_path=config.pose_topology
        )
        print("‚úÖ TRTPoseProcessor inicializado")
        
        # Inicializar clasificador
        print("üîß Inicializando TRTPoseClassifier...")
        classifier = create_pose_classifier(
            model_path=config.pose_classifier_model,
            keypoint_format=config.keypoint_format,
            sequence_length=config.sequence_length,
            confidence_threshold=config.confidence_threshold
        )
        print("‚úÖ TRTPoseClassifier inicializado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error inicializando TRT Pose: {e}")
        return False

def test_calibration():
    """Verifica la configuraci√≥n de calibraci√≥n"""
    print("\nüìè VERIFICANDO CALIBRACI√ìN...")
    
    try:
        from utils.config import Config
        config = Config()
        
        ratio = config.pixel_to_meter_ratio
        print(f"üìê Ratio p√≠xel/metro: {ratio}")
        
        if ratio <= 0:
            print("‚ùå Ratio p√≠xel/metro debe ser positivo")
            return False
        elif ratio > 0.1:
            print("‚ö†Ô∏è Ratio p√≠xel/metro parece muy alto (>0.1)")
            print("   Verificar calibraci√≥n")
        elif ratio < 0.001:
            print("‚ö†Ô∏è Ratio p√≠xel/metro parece muy bajo (<0.001)")
            print("   Verificar calibraci√≥n")
        else:
            print("‚úÖ Ratio p√≠xel/metro parece razonable")
        
        # Mostrar ejemplos de conversi√≥n
        print(f"üìä Ejemplos de conversi√≥n:")
        print(f"   100 p√≠xeles = {100 * ratio:.3f} metros")
        print(f"   1 metro = {1 / ratio:.0f} p√≠xeles")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando calibraci√≥n: {e}")
        return False

def test_system_performance():
    """Prueba b√°sica de rendimiento"""
    print("\n‚ö° PRUEBA DE RENDIMIENTO...")
    
    try:
        import time
        import numpy as np
        from utils.config import Config
        
        config = Config()
        
        # Simular procesamiento de imagen
        start_time = time.time()
        
        # Crear imagen de prueba
        test_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        # Simular m√∫ltiples operaciones
        for i in range(10):
            # Simular procesamiento
            processed = cv2.resize(test_image, (224, 224))
            _ = np.mean(processed)
        
        elapsed = time.time() - start_time
        fps_estimate = 10 / elapsed
        
        print(f"üìà Tiempo para 10 frames: {elapsed:.3f}s")
        print(f"üìä FPS estimado: {fps_estimate:.1f}")
        
        if fps_estimate < 5:
            print("‚ö†Ô∏è Rendimiento bajo - considerar optimizaciones")
        elif fps_estimate < 15:
            print("‚úÖ Rendimiento aceptable")
        else:
            print("‚úÖ Buen rendimiento")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de rendimiento: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üè• VERIFICACI√ìN DEL SISTEMA SPPB CON TRT POSE")
    print("=" * 60)
    
    # Lista de verificaciones
    checks = [
        ("Imports", test_imports),
        ("Modelos", test_models),
        ("C√°maras", test_cameras),
        ("Inicializaci√≥n TRT Pose", test_trt_pose_initialization),
        ("Calibraci√≥n", test_calibration),
        ("Rendimiento", test_system_performance),
    ]
    
    results = {}
    
    # Ejecutar verificaciones
    for check_name, check_function in checks:
        try:
            result = check_function()
            results[check_name] = result
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n {check_name}: {e}")
            results[check_name] = False
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results.items():
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{check_name:.<30} {status}")
        if result:
            passed += 1
    
    print(f"\nüìä Resultado: {passed}/{total} verificaciones pasaron")
    
    if passed == total:
        print("üéâ ¬°Sistema completamente verificado!")
        print("   Puede proceder a ejecutar las pruebas SPPB")
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è Sistema mayormente funcional")
        print("   Revisar las verificaciones que fallaron")
    else:
        print("üö® Sistema requiere configuraci√≥n adicional")
        print("   Resolver los problemas antes de continuar")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
