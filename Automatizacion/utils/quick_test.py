#!/usr/bin/env python3
"""
Prueba R√°pida TensorRT Pose Processor
=====================================

Script para una verificaci√≥n r√°pida del sistema sin diagn√≥sticos completos.

Ejecutar con:
    python quick_test.py

Autor: Sistema de IA
Fecha: 2025
"""

import os
import sys
import time
import numpy as np
import cv2

# Agregar el directorio actual al path para importar
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def quick_test():
    """Prueba r√°pida del sistema"""
    print("‚ö° PRUEBA R√ÅPIDA TENSORRT POSE PROCESSOR")
    print("=" * 50)
    
    try:
        from mediapipe_pose_proc import MediaPipePoseProcessor, TRT_AVAILABLE
        
        if not TRT_AVAILABLE:
            print("‚ùå TensorRT no disponible")
            return False
        
        # Buscar modelo
        model_paths = [
            "pose_landmark_lite_fp16.engine",
            "../models/pose_landmark_lite_fp16.engine",
            "models/pose_landmark_lite_fp16.engine"
        ]
        
        model_path = None
        for path in model_paths:
            if os.path.exists(path):
                model_path = path
                break
        
        if not model_path:
            print("‚ùå Modelo no encontrado")
            return False
        
        print(f"‚úÖ Modelo: {os.path.basename(model_path)}")
        
        # Crear procesador
        print("üîÑ Inicializando...")
        processor = MediaPipePoseProcessor(model_path, confidence_threshold=0.3)
        
        # Crear imagen de prueba simple
        test_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        # Una inferencia de prueba
        print("üß™ Ejecutando inferencia...")
        start = time.time()
        keypoints = processor.process_frame(test_image)
        elapsed = (time.time() - start) * 1000
        
        if keypoints is not None:
            print(f"‚úÖ √âxito en {elapsed:.1f}ms")
            print(f"üéØ Keypoints: {len(keypoints)}")
            
            # Contar keypoints con confianza > 0.1
            valid_kp = np.sum(keypoints[:, 2] > 0.1)
            print(f"üìä V√°lidos: {valid_kp}/33")
            
            # Prueba de visualizaci√≥n
            try:
                visualized = processor.visualize_keypoints(test_image, keypoints)
                print("‚úÖ Visualizaci√≥n OK")
            except:
                print("‚ö†Ô∏è Error en visualizaci√≥n")
            
            processor.cleanup()
            return True
        else:
            print("‚ùå Inferencia fall√≥")
            processor.cleanup()
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    start_time = time.time()
    success = quick_test()
    total_time = time.time() - start_time
    
    print(f"\n‚è±Ô∏è Tiempo total: {total_time:.2f}s")
    
    if success:
        print("üéâ SISTEMA OK - Listo para usar")
    else:
        print("‚ùå PROBLEMAS DETECTADOS - Ejecutar test_tensorrt_pose.py para m√°s detalles")
