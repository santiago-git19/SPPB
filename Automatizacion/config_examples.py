# Configuraci칩n de Ejemplo para SPPB con TRT Pose

"""
Este archivo contiene un ejemplo de configuraci칩n completa para el sistema SPPB
utilizando TRT Pose en lugar de OpenPose, con soporte para dos c치maras.
"""

from utils.config import Config

# === CONFIGURACI칍N PARA JETSON NANO ===
class JetsonNanoConfig(Config):
    def __init__(self):
        super().__init__()
        
        # === RUTAS DE MODELOS (AJUSTAR SEG칔N TU SISTEMA) ===
        self.trt_pose_model = "models/resnet18_baseline_att_224x224_A_epoch_249.pth"
        self.pose_topology = "models/human_pose.json"  
        self.pose_classifier_model = "models/pose_classification/st-gcn_3dbp_nvidia.engine"
        
        # === CONFIGURACI칍N DE C츼MARAS ===
        # Para c치maras USB conectadas
        self.frontal_camera = 0    # /dev/video0
        self.lateral_camera = 1    # /dev/video1
        
        # Para videos pregrabados (comentar las l칤neas de arriba)
        # self.frontal_camera = "videos/frontal_camera.mp4"
        # self.lateral_camera = "videos/lateral_camera.mp4"
        
        # === CALIBRACI칍N (DEBE AJUSTARSE SEG칔N EL SETUP) ===
        # Ejemplo: Si 1 metro = 100 p칤xeles en la imagen
        self.pixel_to_meter_ratio = 0.01  # metros por pixel
        
        # === OPTIMIZACIONES PARA JETSON NANO ===
        self.sequence_length = 10           # Reducido para mejor rendimiento
        self.confidence_threshold = 0.25    # Ajustado para Jetson
        
        # === CONFIGURACI칍N ESPEC칈FICA DE C츼LCULO DE DISTANCIA ===
        self.distance_calculation = {
            'use_hip_keypoints': True,
            'max_frames_without_detection': 20,  # Reducido para Jetson
            'distance_smoothing': True,
            'min_movement_threshold': 0.005     # 5mm m칤nimo
        }

# === CONFIGURACI칍N PARA PC POTENTE ===
class DesktopConfig(Config):
    def __init__(self):
        super().__init__()
        
        # === RUTAS DE MODELOS ===
        self.trt_pose_model = "/home/user/models/resnet18_baseline_att_224x224_A_epoch_249.pth"
        self.pose_topology = "/home/user/models/human_pose.json"
        self.pose_classifier_model = "/home/user/models/st-gcn_3dbp_nvidia.engine"
        
        # === CONFIGURACI칍N DE C츼MARAS ===
        self.frontal_camera = 0
        self.lateral_camera = 1
        
        # === CALIBRACI칍N ===
        self.pixel_to_meter_ratio = 0.008   # Calibraci칩n para setup espec칤fico
        
        # === CONFIGURACI칍N OPTIMIZADA PARA PC ===
        self.sequence_length = 30           # M치s frames para mejor precisi칩n
        self.confidence_threshold = 0.3
        
        self.distance_calculation = {
            'use_hip_keypoints': True,
            'max_frames_without_detection': 30,
            'distance_smoothing': True,
            'min_movement_threshold': 0.001  # 1mm m칤nimo
        }

# === CONFIGURACI칍N PARA DESARROLLO/TESTING ===
class DevelopmentConfig(Config):
    def __init__(self):
        super().__init__()
        
        # === RUTAS DE MODELOS (DESARROLLO) ===
        self.trt_pose_model = "models/resnet18_baseline_att_224x224_A_epoch_249.pth"
        self.pose_topology = "models/human_pose.json"
        self.pose_classifier_model = "models/pose_classification/st-gcn_3dbp_nvidia.engine"
        
        # === CONFIGURACI칍N DE C츼MARAS (VIDEOS DE PRUEBA) ===
        self.frontal_camera = "test_videos/WIN_20250702_12_09_08_Pro.mp4"
        self.lateral_camera = "test_videos/lateral_view.mp4"
        
        # === CALIBRACI칍N (PARA VIDEOS DE PRUEBA) ===
        self.pixel_to_meter_ratio = 0.012   # Ajustar seg칰n videos
        
        # === CONFIGURACI칍N DE DESARROLLO ===
        self.sequence_length = 15
        self.confidence_threshold = 0.2     # M치s permisivo para testing
        
        self.distance_calculation = {
            'use_hip_keypoints': True,
            'max_frames_without_detection': 60,  # M치s tolerante
            'distance_smoothing': True,
            'min_movement_threshold': 0.002
        }

# === FUNCI칍N PARA SELECCIONAR CONFIGURACI칍N ===
def get_config(config_type="development"):
    """
    Devuelve la configuraci칩n apropiada seg칰n el tipo de sistema
    
    Args:
        config_type: Tipo de configuraci칩n ("jetson", "desktop", "development")
        
    Returns:
        Config: Instancia de configuraci칩n apropiada
    """
    configs = {
        "jetson": JetsonNanoConfig,
        "desktop": DesktopConfig, 
        "development": DevelopmentConfig
    }
    
    if config_type not in configs:
        print(f"丘멆잺 Tipo de configuraci칩n '{config_type}' no reconocido")
        print(f"游늶 Tipos disponibles: {list(configs.keys())}")
        print("游댢 Usando configuraci칩n de desarrollo por defecto")
        config_type = "development"
    
    return configs[config_type]()

# === EJEMPLO DE USO ===
if __name__ == "__main__":
    # Seleccionar configuraci칩n seg칰n el entorno
    config = get_config("jetson")  # o "desktop" o "development"
    
    print("游댢 Configuraci칩n cargada:")
    print(f"   游늬 Modelo TRT Pose: {config.trt_pose_model}")
    print(f"   游늬 Clasificador: {config.pose_classifier_model}")
    print(f"   游닟 C치mara frontal: {config.frontal_camera}")
    print(f"   游닟 C치mara lateral: {config.lateral_camera}")
    print(f"   游늺 Ratio p칤xel/metro: {config.pixel_to_meter_ratio}")
